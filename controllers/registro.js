const { addKeyword } = require("@bot-whatsapp/bot");
const flowMenu = require("./menu");
const utils = require("../utils/utils");
const {
  addRegister,
  getUserActive,
  validateId,
} = require("../reposotori/firestore");

let idCliente;
let nombre;
let apellido;
let correo;
let isNumber;
const flowRegistro = addKeyword(
  ["registro", "Registro", "registrate", "Registrate", "regist"],
  { sensitive: true }
)
  .addAnswer(
    [`¬øCu√°l es tu n√∫mero de cliente?\nConsta de 6 d√≠gitos.`],
    { capture: true },
    async (ctx, { fallBack, endFlow }) => {
      idCliente = ctx.body;
      // VALIDAR LONGITUD
      if (idCliente.length < 6 || idCliente.length > 6) return fallBack();
      isNumber = Number(idCliente);
      // VALIDAR TIPO NUMERICO
      if (isNaN(isNumber)) return fallBack();
      // VALIDACI√ìN S√ç EXISTE BD
      const isValida = await validateId(idCliente);

      const userActive = await getUserActive("ID", idCliente);

      if (!isValida.activo) {
        return endFlow({
          body: `Estimado participante. üò£
                    \nLe informamos que el n√∫mero de identificador de cliente *${idCliente}*, proporcionado no est√° registrado en nuestra base de datos, por lo que le invitamos a rectificar el n√∫mero correcto y volver a empezar su proceso de registro.
                    \nEn caso de que sea un error, le invitamos a contactar a nuestro equipo de atenci√≥n a clientes enviando un correo electr√≥nico a xxxx@capistrano.com para que su n√∫mero sea dado de alta.
                    \nS√≠ ingresaste alg√∫n dato incorrecto puedes volver a empezar escribiendo *incio* en cualquier momento.
                    `,
        });
      }
      // VALIDACI√ìN S√ç ESTATUS BD
      if (userActive.activo) {
        return endFlow({
          body: `Estimado participante. üò£
                    \nLe informamos que seg√∫n nuestra base de datos el registro a este consurso ya fue realizado previamente con la siguente informaci√≥n.
                    \nüìÖ Fecha de registro: *##/##/20##*
                    \nüì± N√∫mero telef√≥nico con terminaci√≥n: *${userActive.user.TELEFONO}*
                    \nüìß Correo electr√≥nico: *${userActive.user.EMAIL}*
                    \nEn caso de que sea un error, le invitamos a contactar a nuestro equipo de atenci√≥n a clientes enviando un correo electr√≥nico a xxxx@capistrano.com para que su n√∫mero sea dado de alta.
                    \nS√≠ ingresaste alg√∫n dato incorrecto puedes volver a empezar escribiendo *incio* en cualquier momento.`,
        });
      }
    }
  )
  .addAnswer(
    "¬øCu√°l es su nombre(s)?",
    { capture: true },
    (ctx, { fallBack }) => {
      nombre = ctx.body;
      const regex =
        /^[a-zA-Z√Ä-√ø\u00f1\u00d1]+(\s*[a-zA-Z√Ä-√ø\u00f1\u00d1])[a-zA-Z√Ä-√ø\u00f1\u00d1]+$/g;
      const isValid = regex.test(nombre);
      // VALIDAR CAR√ÅCTERES
      if (!isValid) return fallBack();
      // VALIDAR LONGITUD
      if (nombre.length < 3) return fallBack();
    }
  )
  .addAnswer(
    "¬øCu√°l es su apellido(s)?",
    { capture: true },
    (ctx, { fallBack }) => {
      apellido = ctx.body;
      const regex =
        /^[a-zA-Z√Ä-√ø\u00f1\u00d1]+(\s*[a-zA-Z√Ä-√ø\u00f1\u00d1])[a-zA-Z√Ä-√ø\u00f1\u00d1]+$/g;
      const isValid = regex.test(apellido);
      // VALIDAR CAR√ÅCTERES
      if (!isValid) return fallBack();
      if (apellido.length < 3) return fallBack();
    }
  )
  .addAnswer(
    "¬øCu√°l es su correo electr√≥nico?",
    { capture: true },
    (ctx, { fallBack }) => {
      correo = ctx.body;
      const regex = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/g;
      const validacionCorreo = regex.test(correo);
      if (!validacionCorreo) return fallBack();
    }
  )
  .addAnswer(
    "!Te deseamos mucha suerte¬° ü•áüçÄüéÅ",
    null,
    async (ctx, { flowDynamic }) => {
      const name = { nombre: `${nombre} ${apellido}` };
      utils.nombre = name;
      console.log("REGISTRO", utils.nombre);
      const registro = await addRegister(
        apellido,
        correo,
        idCliente,
        nombre,
        ctx.pushName,
        ctx.from
      );
      console.log("Nuevo Registro ---->", registro);
      await flowDynamic(
        `Tu registro a sido completado con √©xito ${utils.nombre.nombre} üëè
    \nRecuerda que:
    \n1. Todas tus compras que superen tu objetivo semanal, sumar√°n puntos en tu cuenta de CAPISTRANO. Sabor que premia.\n2. Tus puntos los podras cambiar por electrodom√©sticos, equipos electr√≥nicos, equipos para tu negocio, remodelaciones  y m√°s.\n3. Para ser uno de los [_n√∫mero de premios_] ganadores [_semanales o mensuales_], deber√°s ser uno de los ganadores con mayor puntaje.
    \n${utils.nombre}, no dejes de participar y prep√°rate para  ganar con CAPISTRANO. Sabor que premia. üéñüí∞
    \n¬øDeseas conocer tu puntaje?`
      );
    }
  )
  .addAnswer(
    "Escribe *menu* para ingresar a t√∫ men√∫ principal",
    { capture: true },
    async (ctx, { gotoFlow }) => {
      return gotoFlow(flowMenu);
    }
  );

module.exports = flowRegistro;
